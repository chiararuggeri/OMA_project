// Step3.cpp : Questo file contiene la funzione 'main', in cui inizia e termina l'esecuzione del programma.
//

#include "pch.h"
#include <iostream>
#include <fstream>
#include <string>
#include <stdlib.h>
#include <set>
#include <ctime> 
#include <map>
#include <list>

using namespace std;

typedef struct solution{
	bool** matrix;
	int fitness;
} sol;

// global variables
int N_QUERIES = 0;
int N_INDEXES = 0;
int N_CONFIGURATIONS = 0;
int MEMORY = 0;

list<int> *configIndexes;
int * indexesCost;
int * indexesMem;
int ** configGain;

// best current solution
int bestFitnessFoundSoFar = 0;

// function prototypes
void performCrossover(solution best, solution random, set<solution> children);
set<solution> generateChildren(set<solution> parents);
int calculateFitness(map<int, int> confXquery);


bool operator < (const solution& sol1, const solution& sol2)
{
	return sol1.fitness > sol2.fitness;
}

int main()
{
	ifstream instanceFile;
	instanceFile.open("instance01.odbdp");
	if (!instanceFile.is_open()) {
		// ERROR - Instance file not found
		cout << "Specified instance file cannot not be found.";
		exit(0);
	}
	string line;
	string number;

	// read first line
	getline(instanceFile, line);
	// get queries number from the first line
	number = line.substr(11);
	// reference to stoi function: http://www.cplusplus.com/reference/string/stoi/
	N_QUERIES = stoi(number, nullptr);

	// read second line and get indexes number from it
	getline(instanceFile, line);
	number = line.substr(11);
	N_INDEXES = stoi(number, nullptr);

	// read third line and get configurations number from it
	getline(instanceFile, line);
	number = line.substr(18);
	N_CONFIGURATIONS = stoi(number, nullptr);

	// read fourth line and get memory constraint from it
	getline(instanceFile, line);
	number = line.substr(8);
	MEMORY = stoi(number, nullptr);

	// print retrieved data
	cout << "number of queries: " << N_QUERIES << endl << "number of indexes: " << N_INDEXES << endl << "number of configurations: " << N_CONFIGURATIONS << endl << "memory: " << MEMORY << endl;

	// remove CONFIGURATIONS_INDEXES_MATRIX: row
	getline(instanceFile, line);

	// read CONFIGURATIONS_INDEXES_MATRIX and for each configuration save a list of its indexes
	configIndexes = new list<int>[N_CONFIGURATIONS];
	for (int i = 0; i < N_CONFIGURATIONS; i++) { // for each row
		list<int> indexForConf;
		getline(instanceFile, line);
		for (unsigned int j = 0; j < line.size(); j += 2) { // for each element in the row (+2 to skip spaces)
			if (line[j] == '1') {
				indexForConf.push_front(j / 2);
			}
		}
		configIndexes[i] = indexForConf;
	}

	// remove INDEXES_FIXED_COST: row
	getline(instanceFile, line);

	// read INDEXES_FIXED_COST and save cost values in an array
	indexesCost = (int*)malloc(sizeof(int) * N_INDEXES);
	for (int i = 0; i < N_INDEXES; i++) {
		getline(instanceFile, line);
		indexesCost[i] = stoi(line, nullptr);
	}

	// remove INDEXES_MEMORY_OCCUPATION: row
	getline(instanceFile, line);

	// read INDEXES_MEMORY_OCCUPATION and save memory values in an array
	indexesMem = (int*)malloc(sizeof(int) * N_INDEXES);
	for (int i = 0; i < N_INDEXES; i++) {
		getline(instanceFile, line);
		indexesMem[i] = stoi(line, nullptr);
	}

	// remove CONFIGURATIONS_QUERIES_GAIN: row
	getline(instanceFile, line);

	// read CONFIGURATIONS_QUERIES_GAIN matrix and save it in an internal variable
	configGain = new int*[N_CONFIGURATIONS];
	for (int i = 0; i < N_CONFIGURATIONS; i++)
		configGain[i] = new int[N_QUERIES];
	for (int i = 0; i < N_CONFIGURATIONS; i++) {
		getline(instanceFile, line);
		for (int j = 0; j < N_QUERIES; j++) {
			string::size_type sz;
			configGain[i][j] = stoi(line, &sz);
			line = line.substr(sz + 1); // go to the next number in the row (skipping space)
		}
	}
	/* DEBUG print
		cout << "indexes cost:" << endl;
		for (int i = 0; i < N_INDEXES; i++) {
			cout << indexesCost[i] << endl;
		}
		cout << "indexes memory:" << endl;
		for (int i = 0; i < N_INDEXES; i++) {
			cout << indexesMem[i] << endl;
		}
		cout << "CONFIGURATIONS_QUERIES_GAIN matrix:" << endl;
		for (int i = 0; i < N_CONFIGURATIONS; i++) {
			for (int j = 0; j < N_QUERIES; j++) {
				cout << configGain[i][j] << " ";
			}
			cout << endl;
		}
	*/
	solution* sol1 = new solution;
	sol1->matrix = new bool*[N_CONFIGURATIONS];
	for (int i = 0; i < N_CONFIGURATIONS; i++)
		sol1->matrix[i] = new bool[N_QUERIES];
	sol1->matrix[10][20] = 1;
	sol1->matrix[9][10] = 1;
	sol1->matrix[8][9] = 1;
	sol1->matrix[7][8] = 1;
	sol1->matrix[6][7] = 1;
	sol1->matrix[5][6] = 1;
	sol1->matrix[4][5] = 1;
	sol1->matrix[3][4] = 1;
	sol1->matrix[2][1] = 1;
	sol1->matrix[1][3] = 1;
	sol1->fitness = 400;

	solution* sol2 = new solution;
	sol2->matrix = new bool*[N_CONFIGURATIONS];
	for (int i = 0; i < N_CONFIGURATIONS; i++)
		sol2->matrix[i] = new bool[N_QUERIES];
	sol2->matrix[11][49] = 1;
	sol2->matrix[12][1] = 1;
	sol2->matrix[13][45] = 1;
	sol2->matrix[14][9] = 1;
	sol2->matrix[15][7] = 1;
	sol2->matrix[16][16] = 1;
	sol2->matrix[17][30] = 1;
	sol2->matrix[18][28] = 1;
	sol2->matrix[19][11] = 1;
	sol2->matrix[20][3] = 1;
	sol2->fitness = 600;

	set<solution> parents;

	parents.insert(*sol1);
	parents.insert(*sol2);

	// first element in parents set is the one with the greatest fitness
	//cout << "first element = " << parents.begin()->fitness << endl;
	set<solution> son = generateChildren(parents);
}

set<solution> generateChildren(set<solution> parents) {
	set<solution> children;

	// set seed for random number generation
	srand((unsigned)time(0));

	// while there are element in set
	while (parents.size() > 0) {
		// take the first element in set (the one with the biggest fitness) and remove it from the set
		solution best = *parents.begin();
		parents.erase(best);

		// now look for a random element
		solution random;
		// generate a random number between 0 and parent.size
		int i = (rand() % parents.size());
		set<solution>::iterator it = parents.begin();
		// move iterator of "i" position forward
		advance(it, i);
		random = *it;
		// remove random solution from set
		parents.erase(random);

		// generate children and add them to the children set
		performCrossover(best, random, children);
		
	}

	// children has been generated
	if (children.size() == 0) {
		// could happen if generated children are infeasible
		// TODO GOTO step 2
		// to be done during merge phase
	}

	return children;
}

void performCrossover(solution best, solution random, set<solution> children) {
	// calculate crossing points as 1/3 and 2/3 of the lenght of the matrix
	int crossing1 = N_QUERIES / 3;
	int crossing2 = (N_QUERIES / 3) * 2;
	solution* child1 = new solution;
	solution* child2 = new solution;
	child1->matrix = new bool*[N_CONFIGURATIONS];
	child2->matrix = new bool*[N_CONFIGURATIONS];
	for (int i = 0; i < N_CONFIGURATIONS; i++) {
		child1->matrix[i] = new bool[N_QUERIES];
		child2->matrix[i] = new bool[N_QUERIES];
	}
	map<int, int> confXquery1; // store configuration used by qeury of child 1 (useful for fitness calculation)
	map<int, int> confXquery2; // store configuration used by query of child 2
	int j = 0, k = 0;
	for (int i = 0; i < N_QUERIES * N_CONFIGURATIONS; i++) {
		if (k < crossing1 || k > crossing2) {
			// here we are at the edges of the matrix, copy the values as expected
			child1->matrix[j][k] = best.matrix[j][k];
			child2->matrix[j][k] = random.matrix[j][k];
			if (child1->matrix[j][k] == 1) { // configuration j is used for query j
				confXquery1.insert(make_pair(k, j)); // save query k and its configuration j
			}
			if (child2->matrix[j][k] == 1) {
				confXquery2.insert(make_pair(k, j));
			}
		}
		else {
			// here we are between the 2 crossing points, swap values
			child1->matrix[j][k] = random.matrix[j][k];
			child2->matrix[j][k] = best.matrix[j][k];
			if (child1->matrix[j][k] == 1) { // configuration j is used for query j
				confXquery1.insert(make_pair(k, j)); // save query k and its configuration j
			}
			if (child2->matrix[j][k] == 1) {
				confXquery2.insert(make_pair(k, j));
			}
		}
		// change row if needed
		if (++k % N_QUERIES == 0) {
			k = 0;
			j++;
		}
	}
	// children has been created, now we need to check their feasibility and fitness value
	// calculateFitness returns false if solution is infeasible
	int fit1 = calculateFitness(confXquery1);
	if (fit1 >= 0) {
		child1->fitness = fit1;
		children.insert(*child1);
	}
	int fit2 = calculateFitness(confXquery2);
	if (fit2 >= 0) {
		child2->fitness = fit2;
		children.insert(*child2);
	}
}


int calculateFitness(map<int, int> confXquery){
	bool* alreadyUsedIndex = (bool*)malloc(sizeof(bool)*N_INDEXES);
	memset(alreadyUsedIndex, 0, N_INDEXES);

	std::map<int, int>::iterator it;
	int usedMemory = 0;
	int totalCost = 0;
	int totalGain = 0;
	while (confXquery.size() > 0) {
		// get first element
		it = confXquery.begin();
		
		// configuration in it->second is active. calculate cost to build related indexes
		// get the list of indexes for this configuration
		list<int> indexes = configIndexes[it->second];
		while (indexes.size() > 0) {
			// get first element and remove it from the list
			int index = indexes.front();
			indexes.pop_front();
			// check if I already considered the cost of this index
			if (alreadyUsedIndex[index] == false) {
				// update total cost and used memory
				totalCost += indexesCost[index];
				usedMemory += indexesMem[index];
				// stop calculation here if memory constraint is unsatisfied
				if (usedMemory > MEMORY) {
					// infeasible
					return -1;
				}
			}
		}
		// now calculate the gain given by using this configuration
		totalGain += configGain[it->second][it->first];
		// remove element from the map
		confXquery.erase(it->first);
	}

	// calculate and return fitness value
	return totalGain - totalCost;
}
